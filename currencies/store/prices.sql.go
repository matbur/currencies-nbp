// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: prices.sql

package store

import (
	"context"
	"time"
)

const getPrices = `-- name: GetPrices :many
SELECT
    date,
    currency,
    price
FROM
    prices
ORDER BY
    date
`

type GetPricesRow struct {
	Date     time.Time
	Currency string
	Price    float64
}

func (q *Queries) GetPrices(ctx context.Context) ([]GetPricesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPrices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPricesRow
	for rows.Next() {
		var i GetPricesRow
		if err := rows.Scan(&i.Date, &i.Currency, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const savePrice = `-- name: SavePrice :exec
INSERT INTO
    prices (date, currency, price)
VALUES
    ($1, $2, $3)
`

type SavePriceParams struct {
	Date     time.Time
	Currency string
	Price    float64
}

func (q *Queries) SavePrice(ctx context.Context, arg SavePriceParams) error {
	_, err := q.db.ExecContext(ctx, savePrice, arg.Date, arg.Currency, arg.Price)
	return err
}
